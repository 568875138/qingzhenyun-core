// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `userfile.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace userfile
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Serializable]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class FileOperationException : common.CommonRpcException
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public int fileType;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        private void _initDM()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public FileOperationException()
        {
            _initDM();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public FileOperationException(_System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public FileOperationException(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
            this.fileType = info.GetInt32("fileType");
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        private void _initDM(int fileType)
        {
            this.fileType = fileType;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public FileOperationException(int innerCode, string innerMessage, int fileType) : base(innerCode, innerMessage)
        {
            _initDM(fileType);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public FileOperationException(int innerCode, string innerMessage, int fileType, _System.Exception ex) : base(innerCode, innerMessage, ex)
        {
            _initDM(fileType);
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public override string ice_id()
        {
            return "::userfile::FileOperationException";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public override int GetHashCode()
        {
            int h_ = base.GetHashCode();
            IceInternal.HashUtil.hashAdd(ref h_, "::userfile::FileOperationException");
            IceInternal.HashUtil.hashAdd(ref h_, fileType);
            return h_;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public override bool Equals(object other)
        {
            if(other == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            FileOperationException o = other as FileOperationException;
            if(o == null)
            {
                return false;
            }
            if(!base.Equals(other))
            {
                return false;
            }
            if(!this.fileType.Equals(o.fileType))
            {
                return false;
            }
            return true;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public override void GetObjectData(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context)
        {
            info.AddValue("fileType", this.fileType);

            base.GetObjectData(info, context);
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public static bool operator==(FileOperationException lhs, FileOperationException rhs)
        {
            return Equals(lhs, rhs);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public static bool operator!=(FileOperationException lhs, FileOperationException rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::userfile::FileOperationException", -1, false);
            ostr_.writeInt(fileType);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            fileType = istr_.readInt();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [_System.Serializable]
    public partial class UserFileResponse : Ice.Value
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public string uuid;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public string storeId;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public long userId;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public string path;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public string name;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public string ext;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public long size;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public string parent;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public int type;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public long atime;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public long ctime;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public long mtime;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public int version;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public bool locking;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public int opt;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public UserFileResponse()
        {
            this.uuid = "";
            this.storeId = "";
            this.path = "";
            this.name = "";
            this.ext = "";
            this.parent = "";
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public UserFileResponse(string uuid, string storeId, long userId, string path, string name, string ext, long size, string parent, int type, long atime, long ctime, long mtime, int version, bool locking, int opt)
        {
            this.uuid = uuid;
            this.storeId = storeId;
            this.userId = userId;
            this.path = path;
            this.name = name;
            this.ext = ext;
            this.size = size;
            this.parent = parent;
            this.type = type;
            this.atime = atime;
            this.ctime = ctime;
            this.mtime = mtime;
            this.version = version;
            this.locking = locking;
            this.opt = opt;
        }

        #endregion

        private const string _id = "::userfile::UserFileResponse";

        public static new string ice_staticId()
        {
            return _id;
        }
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeString(uuid);
            ostr_.writeString(storeId);
            ostr_.writeLong(userId);
            ostr_.writeString(path);
            ostr_.writeString(name);
            ostr_.writeString(ext);
            ostr_.writeLong(size);
            ostr_.writeString(parent);
            ostr_.writeInt(type);
            ostr_.writeLong(atime);
            ostr_.writeLong(ctime);
            ostr_.writeLong(mtime);
            ostr_.writeInt(version);
            ostr_.writeBool(locking);
            ostr_.writeInt(opt);
            ostr_.endSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            uuid = istr_.readString();
            storeId = istr_.readString();
            userId = istr_.readLong();
            path = istr_.readString();
            name = istr_.readString();
            ext = istr_.readString();
            size = istr_.readLong();
            parent = istr_.readString();
            type = istr_.readInt();
            atime = istr_.readLong();
            ctime = istr_.readLong();
            mtime = istr_.readLong();
            version = istr_.readInt();
            locking = istr_.readBool();
            opt = istr_.readInt();
            istr_.endSlice();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [_System.Serializable]
    public partial class SimpleFile : Ice.Value
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public string uuid;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public string path;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public SimpleFile()
        {
            this.uuid = "";
            this.path = "";
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public SimpleFile(string uuid, string path)
        {
            this.uuid = uuid;
            this.path = path;
        }

        #endregion

        private const string _id = "::userfile::SimpleFile";

        public static new string ice_staticId()
        {
            return _id;
        }
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeString(uuid);
            ostr_.writeString(path);
            ostr_.endSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            uuid = istr_.readString();
            path = istr_.readString();
            istr_.endSlice();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [_System.Serializable]
    public partial class SimpleFileWithStoreId : Ice.Value
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public string uuid;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public string path;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public string storeId;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public int type;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public SimpleFileWithStoreId()
        {
            this.uuid = "";
            this.path = "";
            this.storeId = "";
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public SimpleFileWithStoreId(string uuid, string path, string storeId, int type)
        {
            this.uuid = uuid;
            this.path = path;
            this.storeId = storeId;
            this.type = type;
        }

        #endregion

        private const string _id = "::userfile::SimpleFileWithStoreId";

        public static new string ice_staticId()
        {
            return _id;
        }
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeString(uuid);
            ostr_.writeString(path);
            ostr_.writeString(storeId);
            ostr_.writeInt(type);
            ostr_.endSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            uuid = istr_.readString();
            path = istr_.readString();
            storeId = istr_.readString();
            type = istr_.readInt();
            istr_.endSlice();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [_System.Serializable]
    public partial class UserFilePageResponse : common.CommonPage
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public userfile.UserFileResponse[] list;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public UserFilePageResponse() : base()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public UserFilePageResponse(int page, int pageSize, int totalCount, int totalPage, userfile.UserFileResponse[] list) : base(page, pageSize, totalCount, totalPage)
        {
            this.list = list;
        }

        #endregion

        private const string _id = "::userfile::UserFilePageResponse";

        public static new string ice_staticId()
        {
            return _id;
        }
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            userfile.UserFileResponseListHelper.write(ostr_, list);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            list = userfile.UserFileResponseListHelper.read(istr_);
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [_System.Serializable]
    public partial class FileOperation : Ice.Value
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public long taskId;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public long userId;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public string source;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public string dest;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public int operation;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public FileOperation()
        {
            this.source = "";
            this.dest = "";
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public FileOperation(long taskId, long userId, string source, string dest, int operation)
        {
            this.taskId = taskId;
            this.userId = userId;
            this.source = source;
            this.dest = dest;
            this.operation = operation;
        }

        #endregion

        private const string _id = "::userfile::FileOperation";

        public static new string ice_staticId()
        {
            return _id;
        }
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeLong(taskId);
            ostr_.writeLong(userId);
            ostr_.writeString(source);
            ostr_.writeString(dest);
            ostr_.writeInt(operation);
            ostr_.endSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            taskId = istr_.readLong();
            userId = istr_.readLong();
            source = istr_.readString();
            dest = istr_.readString();
            operation = istr_.readInt();
            istr_.endSlice();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface UserFileServiceHandler : Ice.Object, UserFileServiceHandlerOperations_
    {
    }
}

namespace userfile
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_UserFileServiceHandler_fetchFileOperation(userfile.FileOperation[] ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_UserFileServiceHandler_createDirectory(userfile.UserFileResponse ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_UserFileServiceHandler_createFile(userfile.UserFileResponse ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_UserFileServiceHandler_listDirectoryPage(userfile.UserFilePageResponse ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_UserFileServiceHandler_listDirectory(userfile.UserFileResponse[] ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_UserFileServiceHandler_get(userfile.UserFileResponse ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_UserFileServiceHandler_getSimpleFileWithStoreIdList(userfile.SimpleFileWithStoreId[] ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_UserFileServiceHandler_rename(int ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_UserFileServiceHandler_move(int ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_UserFileServiceHandler_copy(int ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_UserFileServiceHandler_remove(int ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_UserFileServiceHandler_unlock(int ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_UserFileServiceHandler_deleteFile(int ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_UserFileServiceHandler_updateDirectorySize(int ret);
}

namespace userfile
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface UserFileServiceHandlerPrx : Ice.ObjectPrx
    {
        userfile.FileOperation[] fetchFileOperation(int size, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<userfile.FileOperation[]> fetchFileOperationAsync(int size, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_fetchFileOperation> begin_fetchFileOperation(int size, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_fetchFileOperation(int size, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_fetchFileOperation(int size, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        userfile.FileOperation[] end_fetchFileOperation(Ice.AsyncResult asyncResult);

        userfile.UserFileResponse createDirectory(long userId, string parent, string path, string name, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<userfile.UserFileResponse> createDirectoryAsync(long userId, string parent, string path, string name, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_createDirectory> begin_createDirectory(long userId, string parent, string path, string name, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_createDirectory(long userId, string parent, string path, string name, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_createDirectory(long userId, string parent, string path, string name, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        userfile.UserFileResponse end_createDirectory(Ice.AsyncResult asyncResult);

        userfile.UserFileResponse createFile(long userId, string parent, string path, string name, long size, string storeId, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<userfile.UserFileResponse> createFileAsync(long userId, string parent, string path, string name, long size, string storeId, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_createFile> begin_createFile(long userId, string parent, string path, string name, long size, string storeId, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_createFile(long userId, string parent, string path, string name, long size, string storeId, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_createFile(long userId, string parent, string path, string name, long size, string storeId, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        userfile.UserFileResponse end_createFile(Ice.AsyncResult asyncResult);

        userfile.UserFilePageResponse listDirectoryPage(long userId, string uuid, int type, int page, int pageSize, int orderBy, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<userfile.UserFilePageResponse> listDirectoryPageAsync(long userId, string uuid, int type, int page, int pageSize, int orderBy, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_listDirectoryPage> begin_listDirectoryPage(long userId, string uuid, int type, int page, int pageSize, int orderBy, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_listDirectoryPage(long userId, string uuid, int type, int page, int pageSize, int orderBy, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_listDirectoryPage(long userId, string uuid, int type, int page, int pageSize, int orderBy, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        userfile.UserFilePageResponse end_listDirectoryPage(Ice.AsyncResult asyncResult);

        userfile.UserFileResponse[] listDirectory(long userId, string uuid, int type, int start, int size, int orderBy, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<userfile.UserFileResponse[]> listDirectoryAsync(long userId, string uuid, int type, int start, int size, int orderBy, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_listDirectory> begin_listDirectory(long userId, string uuid, int type, int start, int size, int orderBy, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_listDirectory(long userId, string uuid, int type, int start, int size, int orderBy, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_listDirectory(long userId, string uuid, int type, int start, int size, int orderBy, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        userfile.UserFileResponse[] end_listDirectory(Ice.AsyncResult asyncResult);

        userfile.UserFileResponse get(long userId, string uuid, string path, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<userfile.UserFileResponse> getAsync(long userId, string uuid, string path, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_get> begin_get(long userId, string uuid, string path, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_get(long userId, string uuid, string path, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_get(long userId, string uuid, string path, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        userfile.UserFileResponse end_get(Ice.AsyncResult asyncResult);

        userfile.SimpleFileWithStoreId[] getSimpleFileWithStoreIdList(long userId, string[] pathList, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<userfile.SimpleFileWithStoreId[]> getSimpleFileWithStoreIdListAsync(long userId, string[] pathList, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_getSimpleFileWithStoreIdList> begin_getSimpleFileWithStoreIdList(long userId, string[] pathList, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_getSimpleFileWithStoreIdList(long userId, string[] pathList, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_getSimpleFileWithStoreIdList(long userId, string[] pathList, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        userfile.SimpleFileWithStoreId[] end_getSimpleFileWithStoreIdList(Ice.AsyncResult asyncResult);

        int rename(long userId, string uuid, string path, string newName, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<int> renameAsync(long userId, string uuid, string path, string newName, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_rename> begin_rename(long userId, string uuid, string path, string newName, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_rename(long userId, string uuid, string path, string newName, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_rename(long userId, string uuid, string path, string newName, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        int end_rename(Ice.AsyncResult asyncResult);

        int move(long userId, string uuid, string path, string destUuid, string destPath, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<int> moveAsync(long userId, string uuid, string path, string destUuid, string destPath, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_move> begin_move(long userId, string uuid, string path, string destUuid, string destPath, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_move(long userId, string uuid, string path, string destUuid, string destPath, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_move(long userId, string uuid, string path, string destUuid, string destPath, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        int end_move(Ice.AsyncResult asyncResult);

        int copy(long userId, string uuid, string path, string destUuid, string destPath, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<int> copyAsync(long userId, string uuid, string path, string destUuid, string destPath, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_copy> begin_copy(long userId, string uuid, string path, string destUuid, string destPath, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_copy(long userId, string uuid, string path, string destUuid, string destPath, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_copy(long userId, string uuid, string path, string destUuid, string destPath, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        int end_copy(Ice.AsyncResult asyncResult);

        int remove(long userId, string uuid, string path, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<int> removeAsync(long userId, string uuid, string path, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_remove> begin_remove(long userId, string uuid, string path, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_remove(long userId, string uuid, string path, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_remove(long userId, string uuid, string path, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        int end_remove(Ice.AsyncResult asyncResult);

        int unlock(long userId, string uuid, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<int> unlockAsync(long userId, string uuid, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_unlock> begin_unlock(long userId, string uuid, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_unlock(long userId, string uuid, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_unlock(long userId, string uuid, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        int end_unlock(Ice.AsyncResult asyncResult);

        int deleteFile(long userId, string uuid, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<int> deleteFileAsync(long userId, string uuid, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_deleteFile> begin_deleteFile(long userId, string uuid, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_deleteFile(long userId, string uuid, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_deleteFile(long userId, string uuid, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        int end_deleteFile(Ice.AsyncResult asyncResult);

        int updateDirectorySize(long userId, string uuid, long fileSize, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<int> updateDirectorySizeAsync(long userId, string uuid, long fileSize, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_updateDirectorySize> begin_updateDirectorySize(long userId, string uuid, long fileSize, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_updateDirectorySize(long userId, string uuid, long fileSize, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_updateDirectorySize(long userId, string uuid, long fileSize, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        int end_updateDirectorySize(Ice.AsyncResult asyncResult);
    }
}

namespace userfile
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface UserFileServiceHandlerOperations_
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        userfile.FileOperation[] fetchFileOperation(int size, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        userfile.UserFileResponse createDirectory(long userId, string parent, string path, string name, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        userfile.UserFileResponse createFile(long userId, string parent, string path, string name, long size, string storeId, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        userfile.UserFilePageResponse listDirectoryPage(long userId, string uuid, int type, int page, int pageSize, int orderBy, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        userfile.UserFileResponse[] listDirectory(long userId, string uuid, int type, int start, int size, int orderBy, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        userfile.UserFileResponse get(long userId, string uuid, string path, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        userfile.SimpleFileWithStoreId[] getSimpleFileWithStoreIdList(long userId, string[] pathList, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        int rename(long userId, string uuid, string path, string newName, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        int move(long userId, string uuid, string path, string destUuid, string destPath, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        int copy(long userId, string uuid, string path, string destUuid, string destPath, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        int remove(long userId, string uuid, string path, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        int unlock(long userId, string uuid, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        int deleteFile(long userId, string uuid, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        int updateDirectorySize(long userId, string uuid, long fileSize, Ice.Current current = null);
    }
}

namespace userfile
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public sealed class UserFileResponseListHelper
    {
        public static void write(Ice.OutputStream ostr, userfile.UserFileResponse[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeValue(v[ix]);
                }
            }
        }

        public static userfile.UserFileResponse[] read(Ice.InputStream istr)
        {
            userfile.UserFileResponse[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new userfile.UserFileResponse[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    istr.readValue(IceInternal.Patcher.arrayReadValue<userfile.UserFileResponse>(v, ix));
                }
            }
            return v;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public sealed class SimpleFileListHelper
    {
        public static void write(Ice.OutputStream ostr, userfile.SimpleFile[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeValue(v[ix]);
                }
            }
        }

        public static userfile.SimpleFile[] read(Ice.InputStream istr)
        {
            userfile.SimpleFile[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new userfile.SimpleFile[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    istr.readValue(IceInternal.Patcher.arrayReadValue<userfile.SimpleFile>(v, ix));
                }
            }
            return v;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public sealed class FileOperationListHelper
    {
        public static void write(Ice.OutputStream ostr, userfile.FileOperation[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeValue(v[ix]);
                }
            }
        }

        public static userfile.FileOperation[] read(Ice.InputStream istr)
        {
            userfile.FileOperation[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new userfile.FileOperation[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    istr.readValue(IceInternal.Patcher.arrayReadValue<userfile.FileOperation>(v, ix));
                }
            }
            return v;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public sealed class SimpleFileWithStoreIdListHelper
    {
        public static void write(Ice.OutputStream ostr, userfile.SimpleFileWithStoreId[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeValue(v[ix]);
                }
            }
        }

        public static userfile.SimpleFileWithStoreId[] read(Ice.InputStream istr)
        {
            userfile.SimpleFileWithStoreId[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new userfile.SimpleFileWithStoreId[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    istr.readValue(IceInternal.Patcher.arrayReadValue<userfile.SimpleFileWithStoreId>(v, ix));
                }
            }
            return v;
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    [_System.Serializable]
    public sealed class UserFileServiceHandlerPrxHelper : Ice.ObjectPrxHelperBase, UserFileServiceHandlerPrx
    {
        public UserFileServiceHandlerPrxHelper()
        {
        }

        public UserFileServiceHandlerPrxHelper(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public int copy(long userId, string uuid, string path, string destUuid, string destPath, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_copyAsync(userId, uuid, path, destUuid, destPath, context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public userfile.UserFileResponse createDirectory(long userId, string parent, string path, string name, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_createDirectoryAsync(userId, parent, path, name, context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public userfile.UserFileResponse createFile(long userId, string parent, string path, string name, long size, string storeId, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_createFileAsync(userId, parent, path, name, size, storeId, context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int deleteFile(long userId, string uuid, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_deleteFileAsync(userId, uuid, context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public userfile.FileOperation[] fetchFileOperation(int size, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_fetchFileOperationAsync(size, context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public userfile.UserFileResponse get(long userId, string uuid, string path, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_getAsync(userId, uuid, path, context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public userfile.SimpleFileWithStoreId[] getSimpleFileWithStoreIdList(long userId, string[] pathList, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_getSimpleFileWithStoreIdListAsync(userId, pathList, context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public userfile.UserFileResponse[] listDirectory(long userId, string uuid, int type, int start, int size, int orderBy, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_listDirectoryAsync(userId, uuid, type, start, size, orderBy, context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public userfile.UserFilePageResponse listDirectoryPage(long userId, string uuid, int type, int page, int pageSize, int orderBy, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_listDirectoryPageAsync(userId, uuid, type, page, pageSize, orderBy, context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int move(long userId, string uuid, string path, string destUuid, string destPath, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_moveAsync(userId, uuid, path, destUuid, destPath, context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int remove(long userId, string uuid, string path, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_removeAsync(userId, uuid, path, context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int rename(long userId, string uuid, string path, string newName, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_renameAsync(userId, uuid, path, newName, context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int unlock(long userId, string uuid, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_unlockAsync(userId, uuid, context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int updateDirectorySize(long userId, string uuid, long fileSize, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_updateDirectorySizeAsync(userId, uuid, fileSize, context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public _System.Threading.Tasks.Task<int> copyAsync(long userId, string uuid, string path, string destUuid, string destPath, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_copyAsync(userId, uuid, path, destUuid, destPath, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<int> _iceI_copyAsync(long iceP_userId, string iceP_uuid, string iceP_path, string iceP_destUuid, string iceP_destPath, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_copy_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_copy(iceP_userId, iceP_uuid, iceP_path, iceP_destUuid, iceP_destPath, context, synchronous, completed);
            return completed.Task;
        }

        private const string _copy_name = "copy";

        private void _iceI_copy(long iceP_userId, string iceP_uuid, string iceP_path, string iceP_destUuid, string iceP_destPath, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _copy_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeLong(iceP_userId);
                    ostr.writeString(iceP_uuid);
                    ostr.writeString(iceP_path);
                    ostr.writeString(iceP_destUuid);
                    ostr.writeString(iceP_destPath);
                },
                read: (Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task<userfile.UserFileResponse> createDirectoryAsync(long userId, string parent, string path, string name, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_createDirectoryAsync(userId, parent, path, name, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<userfile.UserFileResponse> _iceI_createDirectoryAsync(long iceP_userId, string iceP_parent, string iceP_path, string iceP_name, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_createDirectory_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<userfile.UserFileResponse>(progress, cancel);
            _iceI_createDirectory(iceP_userId, iceP_parent, iceP_path, iceP_name, context, synchronous, completed);
            return completed.Task;
        }

        private const string _createDirectory_name = "createDirectory";

        private void _iceI_createDirectory(long iceP_userId, string iceP_parent, string iceP_path, string iceP_name, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<userfile.UserFileResponse>(completed);
            outAsync.invoke(
                _createDirectory_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeLong(iceP_userId);
                    ostr.writeString(iceP_parent);
                    ostr.writeString(iceP_path);
                    ostr.writeString(iceP_name);
                },
                read: (Ice.InputStream istr) =>
                {
                    userfile.UserFileResponse ret = null;
                    istr.readValue((userfile.UserFileResponse v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task<userfile.UserFileResponse> createFileAsync(long userId, string parent, string path, string name, long size, string storeId, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_createFileAsync(userId, parent, path, name, size, storeId, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<userfile.UserFileResponse> _iceI_createFileAsync(long iceP_userId, string iceP_parent, string iceP_path, string iceP_name, long iceP_size, string iceP_storeId, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_createFile_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<userfile.UserFileResponse>(progress, cancel);
            _iceI_createFile(iceP_userId, iceP_parent, iceP_path, iceP_name, iceP_size, iceP_storeId, context, synchronous, completed);
            return completed.Task;
        }

        private const string _createFile_name = "createFile";

        private void _iceI_createFile(long iceP_userId, string iceP_parent, string iceP_path, string iceP_name, long iceP_size, string iceP_storeId, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<userfile.UserFileResponse>(completed);
            outAsync.invoke(
                _createFile_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeLong(iceP_userId);
                    ostr.writeString(iceP_parent);
                    ostr.writeString(iceP_path);
                    ostr.writeString(iceP_name);
                    ostr.writeLong(iceP_size);
                    ostr.writeString(iceP_storeId);
                },
                read: (Ice.InputStream istr) =>
                {
                    userfile.UserFileResponse ret = null;
                    istr.readValue((userfile.UserFileResponse v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task<int> deleteFileAsync(long userId, string uuid, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_deleteFileAsync(userId, uuid, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<int> _iceI_deleteFileAsync(long iceP_userId, string iceP_uuid, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_deleteFile_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_deleteFile(iceP_userId, iceP_uuid, context, synchronous, completed);
            return completed.Task;
        }

        private const string _deleteFile_name = "deleteFile";

        private void _iceI_deleteFile(long iceP_userId, string iceP_uuid, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _deleteFile_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeLong(iceP_userId);
                    ostr.writeString(iceP_uuid);
                },
                read: (Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task<userfile.FileOperation[]> fetchFileOperationAsync(int size, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_fetchFileOperationAsync(size, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<userfile.FileOperation[]> _iceI_fetchFileOperationAsync(int iceP_size, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_fetchFileOperation_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<userfile.FileOperation[]>(progress, cancel);
            _iceI_fetchFileOperation(iceP_size, context, synchronous, completed);
            return completed.Task;
        }

        private const string _fetchFileOperation_name = "fetchFileOperation";

        private void _iceI_fetchFileOperation(int iceP_size, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<userfile.FileOperation[]>(completed);
            outAsync.invoke(
                _fetchFileOperation_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_size);
                },
                read: (Ice.InputStream istr) =>
                {
                    userfile.FileOperation[] ret;
                    ret = userfile.FileOperationListHelper.read(istr);
                    istr.readPendingValues();
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task<userfile.UserFileResponse> getAsync(long userId, string uuid, string path, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_getAsync(userId, uuid, path, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<userfile.UserFileResponse> _iceI_getAsync(long iceP_userId, string iceP_uuid, string iceP_path, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_get_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<userfile.UserFileResponse>(progress, cancel);
            _iceI_get(iceP_userId, iceP_uuid, iceP_path, context, synchronous, completed);
            return completed.Task;
        }

        private const string _get_name = "get";

        private void _iceI_get(long iceP_userId, string iceP_uuid, string iceP_path, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<userfile.UserFileResponse>(completed);
            outAsync.invoke(
                _get_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeLong(iceP_userId);
                    ostr.writeString(iceP_uuid);
                    ostr.writeString(iceP_path);
                },
                read: (Ice.InputStream istr) =>
                {
                    userfile.UserFileResponse ret = null;
                    istr.readValue((userfile.UserFileResponse v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task<userfile.SimpleFileWithStoreId[]> getSimpleFileWithStoreIdListAsync(long userId, string[] pathList, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_getSimpleFileWithStoreIdListAsync(userId, pathList, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<userfile.SimpleFileWithStoreId[]> _iceI_getSimpleFileWithStoreIdListAsync(long iceP_userId, string[] iceP_pathList, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getSimpleFileWithStoreIdList_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<userfile.SimpleFileWithStoreId[]>(progress, cancel);
            _iceI_getSimpleFileWithStoreIdList(iceP_userId, iceP_pathList, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getSimpleFileWithStoreIdList_name = "getSimpleFileWithStoreIdList";

        private void _iceI_getSimpleFileWithStoreIdList(long iceP_userId, string[] iceP_pathList, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<userfile.SimpleFileWithStoreId[]>(completed);
            outAsync.invoke(
                _getSimpleFileWithStoreIdList_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeLong(iceP_userId);
                    common.StringListHelper.write(ostr, iceP_pathList);
                },
                read: (Ice.InputStream istr) =>
                {
                    userfile.SimpleFileWithStoreId[] ret;
                    ret = userfile.SimpleFileWithStoreIdListHelper.read(istr);
                    istr.readPendingValues();
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task<userfile.UserFileResponse[]> listDirectoryAsync(long userId, string uuid, int type, int start, int size, int orderBy, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_listDirectoryAsync(userId, uuid, type, start, size, orderBy, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<userfile.UserFileResponse[]> _iceI_listDirectoryAsync(long iceP_userId, string iceP_uuid, int iceP_type, int iceP_start, int iceP_size, int iceP_orderBy, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_listDirectory_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<userfile.UserFileResponse[]>(progress, cancel);
            _iceI_listDirectory(iceP_userId, iceP_uuid, iceP_type, iceP_start, iceP_size, iceP_orderBy, context, synchronous, completed);
            return completed.Task;
        }

        private const string _listDirectory_name = "listDirectory";

        private void _iceI_listDirectory(long iceP_userId, string iceP_uuid, int iceP_type, int iceP_start, int iceP_size, int iceP_orderBy, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<userfile.UserFileResponse[]>(completed);
            outAsync.invoke(
                _listDirectory_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeLong(iceP_userId);
                    ostr.writeString(iceP_uuid);
                    ostr.writeInt(iceP_type);
                    ostr.writeInt(iceP_start);
                    ostr.writeInt(iceP_size);
                    ostr.writeInt(iceP_orderBy);
                },
                read: (Ice.InputStream istr) =>
                {
                    userfile.UserFileResponse[] ret;
                    ret = userfile.UserFileResponseListHelper.read(istr);
                    istr.readPendingValues();
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task<userfile.UserFilePageResponse> listDirectoryPageAsync(long userId, string uuid, int type, int page, int pageSize, int orderBy, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_listDirectoryPageAsync(userId, uuid, type, page, pageSize, orderBy, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<userfile.UserFilePageResponse> _iceI_listDirectoryPageAsync(long iceP_userId, string iceP_uuid, int iceP_type, int iceP_page, int iceP_pageSize, int iceP_orderBy, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_listDirectoryPage_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<userfile.UserFilePageResponse>(progress, cancel);
            _iceI_listDirectoryPage(iceP_userId, iceP_uuid, iceP_type, iceP_page, iceP_pageSize, iceP_orderBy, context, synchronous, completed);
            return completed.Task;
        }

        private const string _listDirectoryPage_name = "listDirectoryPage";

        private void _iceI_listDirectoryPage(long iceP_userId, string iceP_uuid, int iceP_type, int iceP_page, int iceP_pageSize, int iceP_orderBy, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<userfile.UserFilePageResponse>(completed);
            outAsync.invoke(
                _listDirectoryPage_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeLong(iceP_userId);
                    ostr.writeString(iceP_uuid);
                    ostr.writeInt(iceP_type);
                    ostr.writeInt(iceP_page);
                    ostr.writeInt(iceP_pageSize);
                    ostr.writeInt(iceP_orderBy);
                },
                read: (Ice.InputStream istr) =>
                {
                    userfile.UserFilePageResponse ret = null;
                    istr.readValue((userfile.UserFilePageResponse v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task<int> moveAsync(long userId, string uuid, string path, string destUuid, string destPath, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_moveAsync(userId, uuid, path, destUuid, destPath, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<int> _iceI_moveAsync(long iceP_userId, string iceP_uuid, string iceP_path, string iceP_destUuid, string iceP_destPath, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_move_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_move(iceP_userId, iceP_uuid, iceP_path, iceP_destUuid, iceP_destPath, context, synchronous, completed);
            return completed.Task;
        }

        private const string _move_name = "move";

        private void _iceI_move(long iceP_userId, string iceP_uuid, string iceP_path, string iceP_destUuid, string iceP_destPath, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _move_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeLong(iceP_userId);
                    ostr.writeString(iceP_uuid);
                    ostr.writeString(iceP_path);
                    ostr.writeString(iceP_destUuid);
                    ostr.writeString(iceP_destPath);
                },
                read: (Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task<int> removeAsync(long userId, string uuid, string path, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_removeAsync(userId, uuid, path, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<int> _iceI_removeAsync(long iceP_userId, string iceP_uuid, string iceP_path, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_remove_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_remove(iceP_userId, iceP_uuid, iceP_path, context, synchronous, completed);
            return completed.Task;
        }

        private const string _remove_name = "remove";

        private void _iceI_remove(long iceP_userId, string iceP_uuid, string iceP_path, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _remove_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeLong(iceP_userId);
                    ostr.writeString(iceP_uuid);
                    ostr.writeString(iceP_path);
                },
                read: (Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task<int> renameAsync(long userId, string uuid, string path, string newName, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_renameAsync(userId, uuid, path, newName, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<int> _iceI_renameAsync(long iceP_userId, string iceP_uuid, string iceP_path, string iceP_newName, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_rename_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_rename(iceP_userId, iceP_uuid, iceP_path, iceP_newName, context, synchronous, completed);
            return completed.Task;
        }

        private const string _rename_name = "rename";

        private void _iceI_rename(long iceP_userId, string iceP_uuid, string iceP_path, string iceP_newName, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _rename_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeLong(iceP_userId);
                    ostr.writeString(iceP_uuid);
                    ostr.writeString(iceP_path);
                    ostr.writeString(iceP_newName);
                },
                read: (Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task<int> unlockAsync(long userId, string uuid, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_unlockAsync(userId, uuid, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<int> _iceI_unlockAsync(long iceP_userId, string iceP_uuid, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_unlock_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_unlock(iceP_userId, iceP_uuid, context, synchronous, completed);
            return completed.Task;
        }

        private const string _unlock_name = "unlock";

        private void _iceI_unlock(long iceP_userId, string iceP_uuid, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _unlock_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeLong(iceP_userId);
                    ostr.writeString(iceP_uuid);
                },
                read: (Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task<int> updateDirectorySizeAsync(long userId, string uuid, long fileSize, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_updateDirectorySizeAsync(userId, uuid, fileSize, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<int> _iceI_updateDirectorySizeAsync(long iceP_userId, string iceP_uuid, long iceP_fileSize, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_updateDirectorySize_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_updateDirectorySize(iceP_userId, iceP_uuid, iceP_fileSize, context, synchronous, completed);
            return completed.Task;
        }

        private const string _updateDirectorySize_name = "updateDirectorySize";

        private void _iceI_updateDirectorySize(long iceP_userId, string iceP_uuid, long iceP_fileSize, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _updateDirectorySize_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeLong(iceP_userId);
                    ostr.writeString(iceP_uuid);
                    ostr.writeLong(iceP_fileSize);
                },
                read: (Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_copy> begin_copy(long userId, string uuid, string path, string destUuid, string destPath, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_copy(userId, uuid, path, destUuid, destPath, context, null, null, false);
        }

        public Ice.AsyncResult begin_copy(long userId, string uuid, string path, string destUuid, string destPath, Ice.AsyncCallback callback, object cookie)
        {
            return begin_copy(userId, uuid, path, destUuid, destPath, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_copy(long userId, string uuid, string path, string destUuid, string destPath, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_copy(userId, uuid, path, destUuid, destPath, context, callback, cookie, false);
        }

        public int end_copy(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _copy_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_copy> begin_copy(long iceP_userId, string iceP_uuid, string iceP_path, string iceP_destUuid, string iceP_destPath, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_copy_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<userfile.Callback_UserFileServiceHandler_copy, int>(
                (userfile.Callback_UserFileServiceHandler_copy cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _copy_name, cookie, completedCallback);
            _iceI_copy(iceP_userId, iceP_uuid, iceP_path, iceP_destUuid, iceP_destPath, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_createDirectory> begin_createDirectory(long userId, string parent, string path, string name, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_createDirectory(userId, parent, path, name, context, null, null, false);
        }

        public Ice.AsyncResult begin_createDirectory(long userId, string parent, string path, string name, Ice.AsyncCallback callback, object cookie)
        {
            return begin_createDirectory(userId, parent, path, name, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_createDirectory(long userId, string parent, string path, string name, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_createDirectory(userId, parent, path, name, context, callback, cookie, false);
        }

        public userfile.UserFileResponse end_createDirectory(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _createDirectory_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<userfile.UserFileResponse>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_createDirectory> begin_createDirectory(long iceP_userId, string iceP_parent, string iceP_path, string iceP_name, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_createDirectory_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<userfile.Callback_UserFileServiceHandler_createDirectory, userfile.UserFileResponse>(
                (userfile.Callback_UserFileServiceHandler_createDirectory cb, userfile.UserFileResponse ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _createDirectory_name, cookie, completedCallback);
            _iceI_createDirectory(iceP_userId, iceP_parent, iceP_path, iceP_name, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_createFile> begin_createFile(long userId, string parent, string path, string name, long size, string storeId, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_createFile(userId, parent, path, name, size, storeId, context, null, null, false);
        }

        public Ice.AsyncResult begin_createFile(long userId, string parent, string path, string name, long size, string storeId, Ice.AsyncCallback callback, object cookie)
        {
            return begin_createFile(userId, parent, path, name, size, storeId, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_createFile(long userId, string parent, string path, string name, long size, string storeId, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_createFile(userId, parent, path, name, size, storeId, context, callback, cookie, false);
        }

        public userfile.UserFileResponse end_createFile(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _createFile_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<userfile.UserFileResponse>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_createFile> begin_createFile(long iceP_userId, string iceP_parent, string iceP_path, string iceP_name, long iceP_size, string iceP_storeId, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_createFile_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<userfile.Callback_UserFileServiceHandler_createFile, userfile.UserFileResponse>(
                (userfile.Callback_UserFileServiceHandler_createFile cb, userfile.UserFileResponse ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _createFile_name, cookie, completedCallback);
            _iceI_createFile(iceP_userId, iceP_parent, iceP_path, iceP_name, iceP_size, iceP_storeId, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_deleteFile> begin_deleteFile(long userId, string uuid, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_deleteFile(userId, uuid, context, null, null, false);
        }

        public Ice.AsyncResult begin_deleteFile(long userId, string uuid, Ice.AsyncCallback callback, object cookie)
        {
            return begin_deleteFile(userId, uuid, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_deleteFile(long userId, string uuid, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_deleteFile(userId, uuid, context, callback, cookie, false);
        }

        public int end_deleteFile(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _deleteFile_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_deleteFile> begin_deleteFile(long iceP_userId, string iceP_uuid, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_deleteFile_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<userfile.Callback_UserFileServiceHandler_deleteFile, int>(
                (userfile.Callback_UserFileServiceHandler_deleteFile cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _deleteFile_name, cookie, completedCallback);
            _iceI_deleteFile(iceP_userId, iceP_uuid, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_fetchFileOperation> begin_fetchFileOperation(int size, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_fetchFileOperation(size, context, null, null, false);
        }

        public Ice.AsyncResult begin_fetchFileOperation(int size, Ice.AsyncCallback callback, object cookie)
        {
            return begin_fetchFileOperation(size, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_fetchFileOperation(int size, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_fetchFileOperation(size, context, callback, cookie, false);
        }

        public userfile.FileOperation[] end_fetchFileOperation(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _fetchFileOperation_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<userfile.FileOperation[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_fetchFileOperation> begin_fetchFileOperation(int iceP_size, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_fetchFileOperation_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<userfile.Callback_UserFileServiceHandler_fetchFileOperation, userfile.FileOperation[]>(
                (userfile.Callback_UserFileServiceHandler_fetchFileOperation cb, userfile.FileOperation[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _fetchFileOperation_name, cookie, completedCallback);
            _iceI_fetchFileOperation(iceP_size, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_get> begin_get(long userId, string uuid, string path, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_get(userId, uuid, path, context, null, null, false);
        }

        public Ice.AsyncResult begin_get(long userId, string uuid, string path, Ice.AsyncCallback callback, object cookie)
        {
            return begin_get(userId, uuid, path, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_get(long userId, string uuid, string path, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_get(userId, uuid, path, context, callback, cookie, false);
        }

        public userfile.UserFileResponse end_get(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _get_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<userfile.UserFileResponse>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_get> begin_get(long iceP_userId, string iceP_uuid, string iceP_path, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_get_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<userfile.Callback_UserFileServiceHandler_get, userfile.UserFileResponse>(
                (userfile.Callback_UserFileServiceHandler_get cb, userfile.UserFileResponse ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _get_name, cookie, completedCallback);
            _iceI_get(iceP_userId, iceP_uuid, iceP_path, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_getSimpleFileWithStoreIdList> begin_getSimpleFileWithStoreIdList(long userId, string[] pathList, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_getSimpleFileWithStoreIdList(userId, pathList, context, null, null, false);
        }

        public Ice.AsyncResult begin_getSimpleFileWithStoreIdList(long userId, string[] pathList, Ice.AsyncCallback callback, object cookie)
        {
            return begin_getSimpleFileWithStoreIdList(userId, pathList, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_getSimpleFileWithStoreIdList(long userId, string[] pathList, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_getSimpleFileWithStoreIdList(userId, pathList, context, callback, cookie, false);
        }

        public userfile.SimpleFileWithStoreId[] end_getSimpleFileWithStoreIdList(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _getSimpleFileWithStoreIdList_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<userfile.SimpleFileWithStoreId[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_getSimpleFileWithStoreIdList> begin_getSimpleFileWithStoreIdList(long iceP_userId, string[] iceP_pathList, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getSimpleFileWithStoreIdList_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<userfile.Callback_UserFileServiceHandler_getSimpleFileWithStoreIdList, userfile.SimpleFileWithStoreId[]>(
                (userfile.Callback_UserFileServiceHandler_getSimpleFileWithStoreIdList cb, userfile.SimpleFileWithStoreId[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getSimpleFileWithStoreIdList_name, cookie, completedCallback);
            _iceI_getSimpleFileWithStoreIdList(iceP_userId, iceP_pathList, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_listDirectory> begin_listDirectory(long userId, string uuid, int type, int start, int size, int orderBy, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_listDirectory(userId, uuid, type, start, size, orderBy, context, null, null, false);
        }

        public Ice.AsyncResult begin_listDirectory(long userId, string uuid, int type, int start, int size, int orderBy, Ice.AsyncCallback callback, object cookie)
        {
            return begin_listDirectory(userId, uuid, type, start, size, orderBy, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_listDirectory(long userId, string uuid, int type, int start, int size, int orderBy, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_listDirectory(userId, uuid, type, start, size, orderBy, context, callback, cookie, false);
        }

        public userfile.UserFileResponse[] end_listDirectory(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _listDirectory_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<userfile.UserFileResponse[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_listDirectory> begin_listDirectory(long iceP_userId, string iceP_uuid, int iceP_type, int iceP_start, int iceP_size, int iceP_orderBy, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_listDirectory_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<userfile.Callback_UserFileServiceHandler_listDirectory, userfile.UserFileResponse[]>(
                (userfile.Callback_UserFileServiceHandler_listDirectory cb, userfile.UserFileResponse[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _listDirectory_name, cookie, completedCallback);
            _iceI_listDirectory(iceP_userId, iceP_uuid, iceP_type, iceP_start, iceP_size, iceP_orderBy, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_listDirectoryPage> begin_listDirectoryPage(long userId, string uuid, int type, int page, int pageSize, int orderBy, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_listDirectoryPage(userId, uuid, type, page, pageSize, orderBy, context, null, null, false);
        }

        public Ice.AsyncResult begin_listDirectoryPage(long userId, string uuid, int type, int page, int pageSize, int orderBy, Ice.AsyncCallback callback, object cookie)
        {
            return begin_listDirectoryPage(userId, uuid, type, page, pageSize, orderBy, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_listDirectoryPage(long userId, string uuid, int type, int page, int pageSize, int orderBy, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_listDirectoryPage(userId, uuid, type, page, pageSize, orderBy, context, callback, cookie, false);
        }

        public userfile.UserFilePageResponse end_listDirectoryPage(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _listDirectoryPage_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<userfile.UserFilePageResponse>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_listDirectoryPage> begin_listDirectoryPage(long iceP_userId, string iceP_uuid, int iceP_type, int iceP_page, int iceP_pageSize, int iceP_orderBy, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_listDirectoryPage_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<userfile.Callback_UserFileServiceHandler_listDirectoryPage, userfile.UserFilePageResponse>(
                (userfile.Callback_UserFileServiceHandler_listDirectoryPage cb, userfile.UserFilePageResponse ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _listDirectoryPage_name, cookie, completedCallback);
            _iceI_listDirectoryPage(iceP_userId, iceP_uuid, iceP_type, iceP_page, iceP_pageSize, iceP_orderBy, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_move> begin_move(long userId, string uuid, string path, string destUuid, string destPath, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_move(userId, uuid, path, destUuid, destPath, context, null, null, false);
        }

        public Ice.AsyncResult begin_move(long userId, string uuid, string path, string destUuid, string destPath, Ice.AsyncCallback callback, object cookie)
        {
            return begin_move(userId, uuid, path, destUuid, destPath, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_move(long userId, string uuid, string path, string destUuid, string destPath, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_move(userId, uuid, path, destUuid, destPath, context, callback, cookie, false);
        }

        public int end_move(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _move_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_move> begin_move(long iceP_userId, string iceP_uuid, string iceP_path, string iceP_destUuid, string iceP_destPath, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_move_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<userfile.Callback_UserFileServiceHandler_move, int>(
                (userfile.Callback_UserFileServiceHandler_move cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _move_name, cookie, completedCallback);
            _iceI_move(iceP_userId, iceP_uuid, iceP_path, iceP_destUuid, iceP_destPath, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_remove> begin_remove(long userId, string uuid, string path, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_remove(userId, uuid, path, context, null, null, false);
        }

        public Ice.AsyncResult begin_remove(long userId, string uuid, string path, Ice.AsyncCallback callback, object cookie)
        {
            return begin_remove(userId, uuid, path, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_remove(long userId, string uuid, string path, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_remove(userId, uuid, path, context, callback, cookie, false);
        }

        public int end_remove(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _remove_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_remove> begin_remove(long iceP_userId, string iceP_uuid, string iceP_path, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_remove_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<userfile.Callback_UserFileServiceHandler_remove, int>(
                (userfile.Callback_UserFileServiceHandler_remove cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _remove_name, cookie, completedCallback);
            _iceI_remove(iceP_userId, iceP_uuid, iceP_path, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_rename> begin_rename(long userId, string uuid, string path, string newName, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_rename(userId, uuid, path, newName, context, null, null, false);
        }

        public Ice.AsyncResult begin_rename(long userId, string uuid, string path, string newName, Ice.AsyncCallback callback, object cookie)
        {
            return begin_rename(userId, uuid, path, newName, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_rename(long userId, string uuid, string path, string newName, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_rename(userId, uuid, path, newName, context, callback, cookie, false);
        }

        public int end_rename(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _rename_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_rename> begin_rename(long iceP_userId, string iceP_uuid, string iceP_path, string iceP_newName, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_rename_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<userfile.Callback_UserFileServiceHandler_rename, int>(
                (userfile.Callback_UserFileServiceHandler_rename cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _rename_name, cookie, completedCallback);
            _iceI_rename(iceP_userId, iceP_uuid, iceP_path, iceP_newName, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_unlock> begin_unlock(long userId, string uuid, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_unlock(userId, uuid, context, null, null, false);
        }

        public Ice.AsyncResult begin_unlock(long userId, string uuid, Ice.AsyncCallback callback, object cookie)
        {
            return begin_unlock(userId, uuid, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_unlock(long userId, string uuid, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_unlock(userId, uuid, context, callback, cookie, false);
        }

        public int end_unlock(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _unlock_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_unlock> begin_unlock(long iceP_userId, string iceP_uuid, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_unlock_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<userfile.Callback_UserFileServiceHandler_unlock, int>(
                (userfile.Callback_UserFileServiceHandler_unlock cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _unlock_name, cookie, completedCallback);
            _iceI_unlock(iceP_userId, iceP_uuid, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_updateDirectorySize> begin_updateDirectorySize(long userId, string uuid, long fileSize, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_updateDirectorySize(userId, uuid, fileSize, context, null, null, false);
        }

        public Ice.AsyncResult begin_updateDirectorySize(long userId, string uuid, long fileSize, Ice.AsyncCallback callback, object cookie)
        {
            return begin_updateDirectorySize(userId, uuid, fileSize, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_updateDirectorySize(long userId, string uuid, long fileSize, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_updateDirectorySize(userId, uuid, fileSize, context, callback, cookie, false);
        }

        public int end_updateDirectorySize(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _updateDirectorySize_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<userfile.Callback_UserFileServiceHandler_updateDirectorySize> begin_updateDirectorySize(long iceP_userId, string iceP_uuid, long iceP_fileSize, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_updateDirectorySize_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<userfile.Callback_UserFileServiceHandler_updateDirectorySize, int>(
                (userfile.Callback_UserFileServiceHandler_updateDirectorySize cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _updateDirectorySize_name, cookie, completedCallback);
            _iceI_updateDirectorySize(iceP_userId, iceP_uuid, iceP_fileSize, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static UserFileServiceHandlerPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            UserFileServiceHandlerPrx r = b as UserFileServiceHandlerPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                UserFileServiceHandlerPrxHelper h = new UserFileServiceHandlerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static UserFileServiceHandlerPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            UserFileServiceHandlerPrx r = b as UserFileServiceHandlerPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                UserFileServiceHandlerPrxHelper h = new UserFileServiceHandlerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static UserFileServiceHandlerPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    UserFileServiceHandlerPrxHelper h = new UserFileServiceHandlerPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static UserFileServiceHandlerPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    UserFileServiceHandlerPrxHelper h = new UserFileServiceHandlerPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static UserFileServiceHandlerPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            UserFileServiceHandlerPrx r = b as UserFileServiceHandlerPrx;
            if(r == null)
            {
                UserFileServiceHandlerPrxHelper h = new UserFileServiceHandlerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static UserFileServiceHandlerPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            UserFileServiceHandlerPrxHelper h = new UserFileServiceHandlerPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::userfile::UserFileServiceHandler"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(Ice.OutputStream ostr, UserFileServiceHandlerPrx v)
        {
            ostr.writeProxy(v);
        }

        public static UserFileServiceHandlerPrx read(Ice.InputStream istr)
        {
            Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                UserFileServiceHandlerPrxHelper result = new UserFileServiceHandlerPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace userfile
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public abstract class UserFileServiceHandlerDisp_ : Ice.ObjectImpl, UserFileServiceHandler
    {
        #region Slice operations

        public abstract userfile.FileOperation[] fetchFileOperation(int size, Ice.Current current = null);

        public abstract userfile.UserFileResponse createDirectory(long userId, string parent, string path, string name, Ice.Current current = null);

        public abstract userfile.UserFileResponse createFile(long userId, string parent, string path, string name, long size, string storeId, Ice.Current current = null);

        public abstract userfile.UserFilePageResponse listDirectoryPage(long userId, string uuid, int type, int page, int pageSize, int orderBy, Ice.Current current = null);

        public abstract userfile.UserFileResponse[] listDirectory(long userId, string uuid, int type, int start, int size, int orderBy, Ice.Current current = null);

        public abstract userfile.UserFileResponse get(long userId, string uuid, string path, Ice.Current current = null);

        public abstract userfile.SimpleFileWithStoreId[] getSimpleFileWithStoreIdList(long userId, string[] pathList, Ice.Current current = null);

        public abstract int rename(long userId, string uuid, string path, string newName, Ice.Current current = null);

        public abstract int move(long userId, string uuid, string path, string destUuid, string destPath, Ice.Current current = null);

        public abstract int copy(long userId, string uuid, string path, string destUuid, string destPath, Ice.Current current = null);

        public abstract int remove(long userId, string uuid, string path, Ice.Current current = null);

        public abstract int unlock(long userId, string uuid, Ice.Current current = null);

        public abstract int deleteFile(long userId, string uuid, Ice.Current current = null);

        public abstract int updateDirectorySize(long userId, string uuid, long fileSize, Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::userfile::UserFileServiceHandler"
        };

        public override bool ice_isA(string s, Ice.Current current = null)
        {
            return _System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_fetchFileOperation(UserFileServiceHandler obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_size;
            iceP_size = istr.readInt();
            inS.endReadParams();
            var ret = obj.fetchFileOperation(iceP_size, current);
            var ostr = inS.startWriteParams();
            userfile.FileOperationListHelper.write(ostr, ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_createDirectory(UserFileServiceHandler obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            long iceP_userId;
            string iceP_parent;
            string iceP_path;
            string iceP_name;
            iceP_userId = istr.readLong();
            iceP_parent = istr.readString();
            iceP_path = istr.readString();
            iceP_name = istr.readString();
            inS.endReadParams();
            var ret = obj.createDirectory(iceP_userId, iceP_parent, iceP_path, iceP_name, current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_createFile(UserFileServiceHandler obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            long iceP_userId;
            string iceP_parent;
            string iceP_path;
            string iceP_name;
            long iceP_size;
            string iceP_storeId;
            iceP_userId = istr.readLong();
            iceP_parent = istr.readString();
            iceP_path = istr.readString();
            iceP_name = istr.readString();
            iceP_size = istr.readLong();
            iceP_storeId = istr.readString();
            inS.endReadParams();
            var ret = obj.createFile(iceP_userId, iceP_parent, iceP_path, iceP_name, iceP_size, iceP_storeId, current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_listDirectoryPage(UserFileServiceHandler obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            long iceP_userId;
            string iceP_uuid;
            int iceP_type;
            int iceP_page;
            int iceP_pageSize;
            int iceP_orderBy;
            iceP_userId = istr.readLong();
            iceP_uuid = istr.readString();
            iceP_type = istr.readInt();
            iceP_page = istr.readInt();
            iceP_pageSize = istr.readInt();
            iceP_orderBy = istr.readInt();
            inS.endReadParams();
            var ret = obj.listDirectoryPage(iceP_userId, iceP_uuid, iceP_type, iceP_page, iceP_pageSize, iceP_orderBy, current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_listDirectory(UserFileServiceHandler obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            long iceP_userId;
            string iceP_uuid;
            int iceP_type;
            int iceP_start;
            int iceP_size;
            int iceP_orderBy;
            iceP_userId = istr.readLong();
            iceP_uuid = istr.readString();
            iceP_type = istr.readInt();
            iceP_start = istr.readInt();
            iceP_size = istr.readInt();
            iceP_orderBy = istr.readInt();
            inS.endReadParams();
            var ret = obj.listDirectory(iceP_userId, iceP_uuid, iceP_type, iceP_start, iceP_size, iceP_orderBy, current);
            var ostr = inS.startWriteParams();
            userfile.UserFileResponseListHelper.write(ostr, ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_get(UserFileServiceHandler obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            long iceP_userId;
            string iceP_uuid;
            string iceP_path;
            iceP_userId = istr.readLong();
            iceP_uuid = istr.readString();
            iceP_path = istr.readString();
            inS.endReadParams();
            var ret = obj.get(iceP_userId, iceP_uuid, iceP_path, current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_getSimpleFileWithStoreIdList(UserFileServiceHandler obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            long iceP_userId;
            string[] iceP_pathList;
            iceP_userId = istr.readLong();
            iceP_pathList = common.StringListHelper.read(istr);
            inS.endReadParams();
            var ret = obj.getSimpleFileWithStoreIdList(iceP_userId, iceP_pathList, current);
            var ostr = inS.startWriteParams();
            userfile.SimpleFileWithStoreIdListHelper.write(ostr, ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_rename(UserFileServiceHandler obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            long iceP_userId;
            string iceP_uuid;
            string iceP_path;
            string iceP_newName;
            iceP_userId = istr.readLong();
            iceP_uuid = istr.readString();
            iceP_path = istr.readString();
            iceP_newName = istr.readString();
            inS.endReadParams();
            var ret = obj.rename(iceP_userId, iceP_uuid, iceP_path, iceP_newName, current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_move(UserFileServiceHandler obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            long iceP_userId;
            string iceP_uuid;
            string iceP_path;
            string iceP_destUuid;
            string iceP_destPath;
            iceP_userId = istr.readLong();
            iceP_uuid = istr.readString();
            iceP_path = istr.readString();
            iceP_destUuid = istr.readString();
            iceP_destPath = istr.readString();
            inS.endReadParams();
            var ret = obj.move(iceP_userId, iceP_uuid, iceP_path, iceP_destUuid, iceP_destPath, current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_copy(UserFileServiceHandler obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            long iceP_userId;
            string iceP_uuid;
            string iceP_path;
            string iceP_destUuid;
            string iceP_destPath;
            iceP_userId = istr.readLong();
            iceP_uuid = istr.readString();
            iceP_path = istr.readString();
            iceP_destUuid = istr.readString();
            iceP_destPath = istr.readString();
            inS.endReadParams();
            var ret = obj.copy(iceP_userId, iceP_uuid, iceP_path, iceP_destUuid, iceP_destPath, current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_remove(UserFileServiceHandler obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            long iceP_userId;
            string iceP_uuid;
            string iceP_path;
            iceP_userId = istr.readLong();
            iceP_uuid = istr.readString();
            iceP_path = istr.readString();
            inS.endReadParams();
            var ret = obj.remove(iceP_userId, iceP_uuid, iceP_path, current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_unlock(UserFileServiceHandler obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            long iceP_userId;
            string iceP_uuid;
            iceP_userId = istr.readLong();
            iceP_uuid = istr.readString();
            inS.endReadParams();
            var ret = obj.unlock(iceP_userId, iceP_uuid, current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_deleteFile(UserFileServiceHandler obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            long iceP_userId;
            string iceP_uuid;
            iceP_userId = istr.readLong();
            iceP_uuid = istr.readString();
            inS.endReadParams();
            var ret = obj.deleteFile(iceP_userId, iceP_uuid, current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_updateDirectorySize(UserFileServiceHandler obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            long iceP_userId;
            string iceP_uuid;
            long iceP_fileSize;
            iceP_userId = istr.readLong();
            iceP_uuid = istr.readString();
            iceP_fileSize = istr.readLong();
            inS.endReadParams();
            var ret = obj.updateDirectorySize(iceP_userId, iceP_uuid, iceP_fileSize, current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "copy",
            "createDirectory",
            "createFile",
            "deleteFile",
            "fetchFileOperation",
            "get",
            "getSimpleFileWithStoreIdList",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "listDirectory",
            "listDirectoryPage",
            "move",
            "remove",
            "rename",
            "unlock",
            "updateDirectorySize"
        };

        public override _System.Threading.Tasks.Task<Ice.OutputStream>
        iceDispatch(IceInternal.Incoming inS, Ice.Current current)
        {
            int pos = _System.Array.BinarySearch(_all, current.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_copy(this, inS, current);
                }
                case 1:
                {
                    return iceD_createDirectory(this, inS, current);
                }
                case 2:
                {
                    return iceD_createFile(this, inS, current);
                }
                case 3:
                {
                    return iceD_deleteFile(this, inS, current);
                }
                case 4:
                {
                    return iceD_fetchFileOperation(this, inS, current);
                }
                case 5:
                {
                    return iceD_get(this, inS, current);
                }
                case 6:
                {
                    return iceD_getSimpleFileWithStoreIdList(this, inS, current);
                }
                case 7:
                {
                    return Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 8:
                {
                    return Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 9:
                {
                    return Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 10:
                {
                    return Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 11:
                {
                    return iceD_listDirectory(this, inS, current);
                }
                case 12:
                {
                    return iceD_listDirectoryPage(this, inS, current);
                }
                case 13:
                {
                    return iceD_move(this, inS, current);
                }
                case 14:
                {
                    return iceD_remove(this, inS, current);
                }
                case 15:
                {
                    return iceD_rename(this, inS, current);
                }
                case 16:
                {
                    return iceD_unlock(this, inS, current);
                }
                case 17:
                {
                    return iceD_updateDirectorySize(this, inS, current);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
