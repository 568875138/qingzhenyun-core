# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.7.0
#
# <auto-generated>
#
# Generated from file `common.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module common
_M_common = Ice.openModule('common')
__name__ = 'common'

if 'CommonPage' not in _M_common.__dict__:
    _M_common.CommonPage = Ice.createTempClass()
    class CommonPage(Ice.Value):
        def __init__(self, page=0, pageSize=0, totalCount=0, totalPage=0):
            self.page = page
            self.pageSize = pageSize
            self.totalCount = totalCount
            self.totalPage = totalPage

        def ice_id(self):
            return '::common::CommonPage'

        @staticmethod
        def ice_staticId():
            return '::common::CommonPage'

        def __str__(self):
            return IcePy.stringify(self, _M_common._t_CommonPage)

        __repr__ = __str__

    _M_common._t_CommonPage = IcePy.defineValue('::common::CommonPage', CommonPage, -1, (), False, False, None, (
        ('page', (), IcePy._t_int, False, 0),
        ('pageSize', (), IcePy._t_int, False, 0),
        ('totalCount', (), IcePy._t_int, False, 0),
        ('totalPage', (), IcePy._t_int, False, 0)
    ))
    CommonPage._ice_type = _M_common._t_CommonPage

    _M_common.CommonPage = CommonPage
    del CommonPage

if 'CommonRpcException' not in _M_common.__dict__:
    _M_common.CommonRpcException = Ice.createTempClass()
    class CommonRpcException(Ice.UserException):
        def __init__(self, innerCode=0, innerMessage=''):
            self.innerCode = innerCode
            self.innerMessage = innerMessage

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::common::CommonRpcException'

    _M_common._t_CommonRpcException = IcePy.defineException('::common::CommonRpcException', CommonRpcException, (), False, None, (
        ('innerCode', (), IcePy._t_int, False, 0),
        ('innerMessage', (), IcePy._t_string, False, 0)
    ))
    CommonRpcException._ice_type = _M_common._t_CommonRpcException

    _M_common.CommonRpcException = CommonRpcException
    del CommonRpcException

if '_t_StringList' not in _M_common.__dict__:
    _M_common._t_StringList = IcePy.defineSequence('::common::StringList', (), IcePy._t_string)

# End of module common
