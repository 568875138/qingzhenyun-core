// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `userfile.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.qingzhenyun.common.ice.userfile;

public interface UserFileServiceHandlerPrx extends com.zeroc.Ice.ObjectPrx
{
    default FileOperation[] fetchFileOperation(int size)
    {
        return fetchFileOperation(size, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default FileOperation[] fetchFileOperation(int size, java.util.Map<String, String> context)
    {
        return _iceI_fetchFileOperationAsync(size, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<FileOperation[]> fetchFileOperationAsync(int size)
    {
        return _iceI_fetchFileOperationAsync(size, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<FileOperation[]> fetchFileOperationAsync(int size, java.util.Map<String, String> context)
    {
        return _iceI_fetchFileOperationAsync(size, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<FileOperation[]> _iceI_fetchFileOperationAsync(int iceP_size, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<FileOperation[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "fetchFileOperation", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(iceP_size);
                 }, istr -> {
                     FileOperation[] ret;
                     ret = FileOperationListHelper.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default UserFileResponse createDirectory(long userId, String parent, String path, String name)
    {
        return createDirectory(userId, parent, path, name, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default UserFileResponse createDirectory(long userId, String parent, String path, String name, java.util.Map<String, String> context)
    {
        return _iceI_createDirectoryAsync(userId, parent, path, name, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<UserFileResponse> createDirectoryAsync(long userId, String parent, String path, String name)
    {
        return _iceI_createDirectoryAsync(userId, parent, path, name, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<UserFileResponse> createDirectoryAsync(long userId, String parent, String path, String name, java.util.Map<String, String> context)
    {
        return _iceI_createDirectoryAsync(userId, parent, path, name, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<UserFileResponse> _iceI_createDirectoryAsync(long iceP_userId, String iceP_parent, String iceP_path, String iceP_name, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<UserFileResponse> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createDirectory", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeLong(iceP_userId);
                     ostr.writeString(iceP_parent);
                     ostr.writeString(iceP_path);
                     ostr.writeString(iceP_name);
                 }, istr -> {
                     final com.zeroc.IceInternal.Holder<UserFileResponse> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, UserFileResponse.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default UserFileResponse createFile(long userId, String parent, String path, String name, long size, String storeId)
    {
        return createFile(userId, parent, path, name, size, storeId, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default UserFileResponse createFile(long userId, String parent, String path, String name, long size, String storeId, java.util.Map<String, String> context)
    {
        return _iceI_createFileAsync(userId, parent, path, name, size, storeId, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<UserFileResponse> createFileAsync(long userId, String parent, String path, String name, long size, String storeId)
    {
        return _iceI_createFileAsync(userId, parent, path, name, size, storeId, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<UserFileResponse> createFileAsync(long userId, String parent, String path, String name, long size, String storeId, java.util.Map<String, String> context)
    {
        return _iceI_createFileAsync(userId, parent, path, name, size, storeId, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<UserFileResponse> _iceI_createFileAsync(long iceP_userId, String iceP_parent, String iceP_path, String iceP_name, long iceP_size, String iceP_storeId, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<UserFileResponse> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createFile", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeLong(iceP_userId);
                     ostr.writeString(iceP_parent);
                     ostr.writeString(iceP_path);
                     ostr.writeString(iceP_name);
                     ostr.writeLong(iceP_size);
                     ostr.writeString(iceP_storeId);
                 }, istr -> {
                     final com.zeroc.IceInternal.Holder<UserFileResponse> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, UserFileResponse.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default UserFilePageResponse listDirectoryPage(long userId, String uuid, int type, int page, int pageSize, int orderBy)
    {
        return listDirectoryPage(userId, uuid, type, page, pageSize, orderBy, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default UserFilePageResponse listDirectoryPage(long userId, String uuid, int type, int page, int pageSize, int orderBy, java.util.Map<String, String> context)
    {
        return _iceI_listDirectoryPageAsync(userId, uuid, type, page, pageSize, orderBy, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<UserFilePageResponse> listDirectoryPageAsync(long userId, String uuid, int type, int page, int pageSize, int orderBy)
    {
        return _iceI_listDirectoryPageAsync(userId, uuid, type, page, pageSize, orderBy, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<UserFilePageResponse> listDirectoryPageAsync(long userId, String uuid, int type, int page, int pageSize, int orderBy, java.util.Map<String, String> context)
    {
        return _iceI_listDirectoryPageAsync(userId, uuid, type, page, pageSize, orderBy, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<UserFilePageResponse> _iceI_listDirectoryPageAsync(long iceP_userId, String iceP_uuid, int iceP_type, int iceP_page, int iceP_pageSize, int iceP_orderBy, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<UserFilePageResponse> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listDirectoryPage", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeLong(iceP_userId);
                     ostr.writeString(iceP_uuid);
                     ostr.writeInt(iceP_type);
                     ostr.writeInt(iceP_page);
                     ostr.writeInt(iceP_pageSize);
                     ostr.writeInt(iceP_orderBy);
                 }, istr -> {
                     final com.zeroc.IceInternal.Holder<UserFilePageResponse> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, UserFilePageResponse.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default UserFileResponse[] listDirectory(long userId, String uuid, int type, int start, int size, int orderBy)
    {
        return listDirectory(userId, uuid, type, start, size, orderBy, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default UserFileResponse[] listDirectory(long userId, String uuid, int type, int start, int size, int orderBy, java.util.Map<String, String> context)
    {
        return _iceI_listDirectoryAsync(userId, uuid, type, start, size, orderBy, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<UserFileResponse[]> listDirectoryAsync(long userId, String uuid, int type, int start, int size, int orderBy)
    {
        return _iceI_listDirectoryAsync(userId, uuid, type, start, size, orderBy, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<UserFileResponse[]> listDirectoryAsync(long userId, String uuid, int type, int start, int size, int orderBy, java.util.Map<String, String> context)
    {
        return _iceI_listDirectoryAsync(userId, uuid, type, start, size, orderBy, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<UserFileResponse[]> _iceI_listDirectoryAsync(long iceP_userId, String iceP_uuid, int iceP_type, int iceP_start, int iceP_size, int iceP_orderBy, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<UserFileResponse[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listDirectory", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeLong(iceP_userId);
                     ostr.writeString(iceP_uuid);
                     ostr.writeInt(iceP_type);
                     ostr.writeInt(iceP_start);
                     ostr.writeInt(iceP_size);
                     ostr.writeInt(iceP_orderBy);
                 }, istr -> {
                     UserFileResponse[] ret;
                     ret = UserFileResponseListHelper.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default UserFileResponse get(long userId, String uuid, String path)
    {
        return get(userId, uuid, path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default UserFileResponse get(long userId, String uuid, String path, java.util.Map<String, String> context)
    {
        return _iceI_getAsync(userId, uuid, path, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<UserFileResponse> getAsync(long userId, String uuid, String path)
    {
        return _iceI_getAsync(userId, uuid, path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<UserFileResponse> getAsync(long userId, String uuid, String path, java.util.Map<String, String> context)
    {
        return _iceI_getAsync(userId, uuid, path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<UserFileResponse> _iceI_getAsync(long iceP_userId, String iceP_uuid, String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<UserFileResponse> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "get", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeLong(iceP_userId);
                     ostr.writeString(iceP_uuid);
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     final com.zeroc.IceInternal.Holder<UserFileResponse> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, UserFileResponse.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default SimpleFileWithStoreId[] getSimpleFileWithStoreIdList(long userId, String[] pathList)
    {
        return getSimpleFileWithStoreIdList(userId, pathList, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default SimpleFileWithStoreId[] getSimpleFileWithStoreIdList(long userId, String[] pathList, java.util.Map<String, String> context)
    {
        return _iceI_getSimpleFileWithStoreIdListAsync(userId, pathList, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<SimpleFileWithStoreId[]> getSimpleFileWithStoreIdListAsync(long userId, String[] pathList)
    {
        return _iceI_getSimpleFileWithStoreIdListAsync(userId, pathList, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<SimpleFileWithStoreId[]> getSimpleFileWithStoreIdListAsync(long userId, String[] pathList, java.util.Map<String, String> context)
    {
        return _iceI_getSimpleFileWithStoreIdListAsync(userId, pathList, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<SimpleFileWithStoreId[]> _iceI_getSimpleFileWithStoreIdListAsync(long iceP_userId, String[] iceP_pathList, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<SimpleFileWithStoreId[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getSimpleFileWithStoreIdList", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeLong(iceP_userId);
                     ostr.writeStringSeq(iceP_pathList);
                 }, istr -> {
                     SimpleFileWithStoreId[] ret;
                     ret = SimpleFileWithStoreIdListHelper.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default int rename(long userId, String uuid, String path, String newName)
    {
        return rename(userId, uuid, path, newName, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default int rename(long userId, String uuid, String path, String newName, java.util.Map<String, String> context)
    {
        return _iceI_renameAsync(userId, uuid, path, newName, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> renameAsync(long userId, String uuid, String path, String newName)
    {
        return _iceI_renameAsync(userId, uuid, path, newName, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> renameAsync(long userId, String uuid, String path, String newName, java.util.Map<String, String> context)
    {
        return _iceI_renameAsync(userId, uuid, path, newName, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> _iceI_renameAsync(long iceP_userId, String iceP_uuid, String iceP_path, String iceP_newName, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "rename", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeLong(iceP_userId);
                     ostr.writeString(iceP_uuid);
                     ostr.writeString(iceP_path);
                     ostr.writeString(iceP_newName);
                 }, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    default int move(long userId, String uuid, String path, String destUuid, String destPath)
    {
        return move(userId, uuid, path, destUuid, destPath, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default int move(long userId, String uuid, String path, String destUuid, String destPath, java.util.Map<String, String> context)
    {
        return _iceI_moveAsync(userId, uuid, path, destUuid, destPath, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> moveAsync(long userId, String uuid, String path, String destUuid, String destPath)
    {
        return _iceI_moveAsync(userId, uuid, path, destUuid, destPath, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> moveAsync(long userId, String uuid, String path, String destUuid, String destPath, java.util.Map<String, String> context)
    {
        return _iceI_moveAsync(userId, uuid, path, destUuid, destPath, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> _iceI_moveAsync(long iceP_userId, String iceP_uuid, String iceP_path, String iceP_destUuid, String iceP_destPath, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "move", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeLong(iceP_userId);
                     ostr.writeString(iceP_uuid);
                     ostr.writeString(iceP_path);
                     ostr.writeString(iceP_destUuid);
                     ostr.writeString(iceP_destPath);
                 }, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    default int copy(long userId, String uuid, String path, String destUuid, String destPath)
    {
        return copy(userId, uuid, path, destUuid, destPath, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default int copy(long userId, String uuid, String path, String destUuid, String destPath, java.util.Map<String, String> context)
    {
        return _iceI_copyAsync(userId, uuid, path, destUuid, destPath, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> copyAsync(long userId, String uuid, String path, String destUuid, String destPath)
    {
        return _iceI_copyAsync(userId, uuid, path, destUuid, destPath, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> copyAsync(long userId, String uuid, String path, String destUuid, String destPath, java.util.Map<String, String> context)
    {
        return _iceI_copyAsync(userId, uuid, path, destUuid, destPath, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> _iceI_copyAsync(long iceP_userId, String iceP_uuid, String iceP_path, String iceP_destUuid, String iceP_destPath, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "copy", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeLong(iceP_userId);
                     ostr.writeString(iceP_uuid);
                     ostr.writeString(iceP_path);
                     ostr.writeString(iceP_destUuid);
                     ostr.writeString(iceP_destPath);
                 }, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    default int remove(long userId, String uuid, String path)
    {
        return remove(userId, uuid, path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default int remove(long userId, String uuid, String path, java.util.Map<String, String> context)
    {
        return _iceI_removeAsync(userId, uuid, path, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> removeAsync(long userId, String uuid, String path)
    {
        return _iceI_removeAsync(userId, uuid, path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> removeAsync(long userId, String uuid, String path, java.util.Map<String, String> context)
    {
        return _iceI_removeAsync(userId, uuid, path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> _iceI_removeAsync(long iceP_userId, String iceP_uuid, String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "remove", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeLong(iceP_userId);
                     ostr.writeString(iceP_uuid);
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    default int unlock(long userId, String uuid)
    {
        return unlock(userId, uuid, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default int unlock(long userId, String uuid, java.util.Map<String, String> context)
    {
        return _iceI_unlockAsync(userId, uuid, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> unlockAsync(long userId, String uuid)
    {
        return _iceI_unlockAsync(userId, uuid, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> unlockAsync(long userId, String uuid, java.util.Map<String, String> context)
    {
        return _iceI_unlockAsync(userId, uuid, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> _iceI_unlockAsync(long iceP_userId, String iceP_uuid, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "unlock", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeLong(iceP_userId);
                     ostr.writeString(iceP_uuid);
                 }, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    default int deleteFile(long userId, String uuid)
    {
        return deleteFile(userId, uuid, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default int deleteFile(long userId, String uuid, java.util.Map<String, String> context)
    {
        return _iceI_deleteFileAsync(userId, uuid, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> deleteFileAsync(long userId, String uuid)
    {
        return _iceI_deleteFileAsync(userId, uuid, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> deleteFileAsync(long userId, String uuid, java.util.Map<String, String> context)
    {
        return _iceI_deleteFileAsync(userId, uuid, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> _iceI_deleteFileAsync(long iceP_userId, String iceP_uuid, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "deleteFile", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeLong(iceP_userId);
                     ostr.writeString(iceP_uuid);
                 }, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    default int updateDirectorySize(long userId, String uuid, long fileSize)
    {
        return updateDirectorySize(userId, uuid, fileSize, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default int updateDirectorySize(long userId, String uuid, long fileSize, java.util.Map<String, String> context)
    {
        return _iceI_updateDirectorySizeAsync(userId, uuid, fileSize, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> updateDirectorySizeAsync(long userId, String uuid, long fileSize)
    {
        return _iceI_updateDirectorySizeAsync(userId, uuid, fileSize, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> updateDirectorySizeAsync(long userId, String uuid, long fileSize, java.util.Map<String, String> context)
    {
        return _iceI_updateDirectorySizeAsync(userId, uuid, fileSize, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> _iceI_updateDirectorySizeAsync(long iceP_userId, String iceP_uuid, long iceP_fileSize, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "updateDirectorySize", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeLong(iceP_userId);
                     ostr.writeString(iceP_uuid);
                     ostr.writeLong(iceP_fileSize);
                 }, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static UserFileServiceHandlerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), UserFileServiceHandlerPrx.class, _UserFileServiceHandlerPrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static UserFileServiceHandlerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), UserFileServiceHandlerPrx.class, _UserFileServiceHandlerPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static UserFileServiceHandlerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), UserFileServiceHandlerPrx.class, _UserFileServiceHandlerPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static UserFileServiceHandlerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), UserFileServiceHandlerPrx.class, _UserFileServiceHandlerPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static UserFileServiceHandlerPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, UserFileServiceHandlerPrx.class, _UserFileServiceHandlerPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static UserFileServiceHandlerPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, UserFileServiceHandlerPrx.class, _UserFileServiceHandlerPrxI.class);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the per-proxy context.
     * @param newContext The context for the new proxy.
     * @return A proxy with the specified per-proxy context.
     **/
    @Override
    default UserFileServiceHandlerPrx ice_context(java.util.Map<String, String> newContext)
    {
        return (UserFileServiceHandlerPrx)_ice_context(newContext);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the adapter ID.
     * @param newAdapterId The adapter ID for the new proxy.
     * @return A proxy with the specified adapter ID.
     **/
    @Override
    default UserFileServiceHandlerPrx ice_adapterId(String newAdapterId)
    {
        return (UserFileServiceHandlerPrx)_ice_adapterId(newAdapterId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoints.
     * @param newEndpoints The endpoints for the new proxy.
     * @return A proxy with the specified endpoints.
     **/
    @Override
    default UserFileServiceHandlerPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints)
    {
        return (UserFileServiceHandlerPrx)_ice_endpoints(newEndpoints);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator cache timeout.
     * @param newTimeout The new locator cache timeout (in seconds).
     * @return A proxy with the specified locator cache timeout.
     **/
    @Override
    default UserFileServiceHandlerPrx ice_locatorCacheTimeout(int newTimeout)
    {
        return (UserFileServiceHandlerPrx)_ice_locatorCacheTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the invocation timeout.
     * @param newTimeout The new invocation timeout (in seconds).
     * @return A proxy with the specified invocation timeout.
     **/
    @Override
    default UserFileServiceHandlerPrx ice_invocationTimeout(int newTimeout)
    {
        return (UserFileServiceHandlerPrx)_ice_invocationTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for connection caching.
     * @param newCache <code>true</code> if the new proxy should cache connections; <code>false</code> otherwise.
     * @return A proxy with the specified caching policy.
     **/
    @Override
    default UserFileServiceHandlerPrx ice_connectionCached(boolean newCache)
    {
        return (UserFileServiceHandlerPrx)_ice_connectionCached(newCache);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoint selection policy.
     * @param newType The new endpoint selection policy.
     * @return A proxy with the specified endpoint selection policy.
     **/
    @Override
    default UserFileServiceHandlerPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType)
    {
        return (UserFileServiceHandlerPrx)_ice_endpointSelection(newType);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for how it selects endpoints.
     * @param b If <code>b</code> is <code>true</code>, only endpoints that use a secure transport are
     * used by the new proxy. If <code>b</code> is false, the returned proxy uses both secure and
     * insecure endpoints.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default UserFileServiceHandlerPrx ice_secure(boolean b)
    {
        return (UserFileServiceHandlerPrx)_ice_secure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the encoding used to marshal parameters.
     * @param e The encoding version to use to marshal request parameters.
     * @return A proxy with the specified encoding version.
     **/
    @Override
    default UserFileServiceHandlerPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e)
    {
        return (UserFileServiceHandlerPrx)_ice_encodingVersion(e);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its endpoint selection policy.
     * @param b If <code>b</code> is <code>true</code>, the new proxy will use secure endpoints for invocations
     * and only use insecure endpoints if an invocation cannot be made via secure endpoints. If <code>b</code> is
     * <code>false</code>, the proxy prefers insecure endpoints to secure ones.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default UserFileServiceHandlerPrx ice_preferSecure(boolean b)
    {
        return (UserFileServiceHandlerPrx)_ice_preferSecure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the router.
     * @param router The router for the new proxy.
     * @return A proxy with the specified router.
     **/
    @Override
    default UserFileServiceHandlerPrx ice_router(com.zeroc.Ice.RouterPrx router)
    {
        return (UserFileServiceHandlerPrx)_ice_router(router);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator.
     * @param locator The locator for the new proxy.
     * @return A proxy with the specified locator.
     **/
    @Override
    default UserFileServiceHandlerPrx ice_locator(com.zeroc.Ice.LocatorPrx locator)
    {
        return (UserFileServiceHandlerPrx)_ice_locator(locator);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for collocation optimization.
     * @param b <code>true</code> if the new proxy enables collocation optimization; <code>false</code> otherwise.
     * @return A proxy with the specified collocation optimization.
     **/
    @Override
    default UserFileServiceHandlerPrx ice_collocationOptimized(boolean b)
    {
        return (UserFileServiceHandlerPrx)_ice_collocationOptimized(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses twoway invocations.
     * @return A proxy that uses twoway invocations.
     **/
    @Override
    default UserFileServiceHandlerPrx ice_twoway()
    {
        return (UserFileServiceHandlerPrx)_ice_twoway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses oneway invocations.
     * @return A proxy that uses oneway invocations.
     **/
    @Override
    default UserFileServiceHandlerPrx ice_oneway()
    {
        return (UserFileServiceHandlerPrx)_ice_oneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch oneway invocations.
     * @return A proxy that uses batch oneway invocations.
     **/
    @Override
    default UserFileServiceHandlerPrx ice_batchOneway()
    {
        return (UserFileServiceHandlerPrx)_ice_batchOneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses datagram invocations.
     * @return A proxy that uses datagram invocations.
     **/
    @Override
    default UserFileServiceHandlerPrx ice_datagram()
    {
        return (UserFileServiceHandlerPrx)_ice_datagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch datagram invocations.
     * @return A proxy that uses batch datagram invocations.
     **/
    @Override
    default UserFileServiceHandlerPrx ice_batchDatagram()
    {
        return (UserFileServiceHandlerPrx)_ice_batchDatagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, except for compression.
     * @param co <code>true</code> enables compression for the new proxy; <code>false</code> disables compression.
     * @return A proxy with the specified compression setting.
     **/
    @Override
    default UserFileServiceHandlerPrx ice_compress(boolean co)
    {
        return (UserFileServiceHandlerPrx)_ice_compress(co);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection timeout setting.
     * @param t The connection timeout for the proxy in milliseconds.
     * @return A proxy with the specified timeout.
     **/
    @Override
    default UserFileServiceHandlerPrx ice_timeout(int t)
    {
        return (UserFileServiceHandlerPrx)_ice_timeout(t);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection ID.
     * @param connectionId The connection ID for the new proxy. An empty string removes the connection ID.
     * @return A proxy with the specified connection ID.
     **/
    @Override
    default UserFileServiceHandlerPrx ice_connectionId(String connectionId)
    {
        return (UserFileServiceHandlerPrx)_ice_connectionId(connectionId);
    }

    static String ice_staticId()
    {
        return "::userfile::UserFileServiceHandler";
    }
}
