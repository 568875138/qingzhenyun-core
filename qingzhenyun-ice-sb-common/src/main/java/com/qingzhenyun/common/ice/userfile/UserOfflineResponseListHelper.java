// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `userfile.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.qingzhenyun.common.ice.userfile;

public final class UserOfflineResponseListHelper {
    public static void write(com.zeroc.Ice.OutputStream ostr, UserOfflineResponse[] v) {
        if (v == null) {
            ostr.writeSize(0);
        } else {
            ostr.writeSize(v.length);
            for (int i0 = 0; i0 < v.length; i0++) {
                ostr.writeValue(v[i0]);
            }
        }
    }

    public static UserOfflineResponse[] read(com.zeroc.Ice.InputStream istr) {
        final UserOfflineResponse[] v;
        final int len0 = istr.readAndCheckSeqSize(1);
        v = new UserOfflineResponse[len0];
        for (int i0 = 0; i0 < len0; i0++) {
            final int fi0 = i0;
            istr.readValue(value -> v[fi0] = value, UserOfflineResponse.class);
        }
        return v;
    }

    public static void write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<UserOfflineResponse[]> v) {
        if (v != null && v.isPresent()) {
            write(ostr, tag, v.get());
        }
    }

    public static void write(com.zeroc.Ice.OutputStream ostr, int tag, UserOfflineResponse[] v) {
        if (ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize)) {
            int pos = ostr.startSize();
            UserOfflineResponseListHelper.write(ostr, v);
            ostr.endSize(pos);
        }
    }

    public static java.util.Optional<UserOfflineResponse[]> read(com.zeroc.Ice.InputStream istr, int tag) {
        if (istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize)) {
            istr.skip(4);
            UserOfflineResponse[] v;
            v = UserOfflineResponseListHelper.read(istr);
            return java.util.Optional.of(v);
        } else {
            return java.util.Optional.empty();
        }
    }
}
