buildscript {
    //ext.kotlin_version = '1.2.30'

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url 'https://plugins.gradle.org/m2/'}
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}")
        classpath "nu.studer:gradle-jooq-plugin:$jooq_plugin_version"
    }
}

apply plugin: 'nu.studer.jooq'
/*
plugins {
    id 'nu.studer.jooq' version jooq_plugin_version
}
*/



group 'com.qingzhenyun'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.springframework.boot'


sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile project(':qingzhenyun-ice-sb-common')
    compile project(':qingzhenyun-common-jooq')
    jooqRuntime group: 'org.postgresql', name: 'postgresql', version: postgres_version
    //compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile("org.springframework.boot:spring-boot-starter:${springBootVersion}")
    testCompile group: 'junit', name: 'junit', version: junit_version
    compile("org.springframework.boot:spring-boot-starter-jdbc:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-jooq:${springBootVersion}")
    compileOnly("org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}")
    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
}

compileKotlin {
    kotlinOptions.jvmTarget = jvm_target
}
compileTestKotlin {
    kotlinOptions.jvmTarget = jvm_target
}

compileJava.dependsOn(processResources)

jooq {
    version = jooq_version // the default (can be omitted)
    userfile(sourceSets.main) {
        jdbc {
            driver = 'org.postgresql.Driver'
            url = "${test_db_url}/${test_db_user_file}"
            user = test_db_user
            password = test_db_password
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                inputSchema = 'public'
                forcedTypes {
                    forcedType {
                        name = 'BOOLEAN'
                        expression = '.*\\.HANDMADE'
                        types = '.*'
                    }
                }
            }

            generate {
                relations = true
                deprecated = false
                records = true
                immutablePojos = false
                fluentSetters = true
                pojos = true
                daos = false
                javaTimeTypes = true
            }
            target {
                packageName = 'com.qingzhenyun.generated.file'
                //directory = 'src/main/java'
                encoding = 'UTF-8'
            }
        }
    }
}